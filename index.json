{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Change log | LaunchDarkly Logging API for .NET - Microsoft.Extensions.Logging Adapter",
    "keywords": "Change log All notable changes to the project will be documented in this file. For full release notes for the projects that depend on this project, see their respective changelogs. This file describes changes only to the common code. This project adheres to Semantic Versioning. [3.2.0] - 2024-11-13 Changed: Extended support of Microsoft.Logging.Extensions to include versions 9+. [3.1.0] - 2023-07-27 Changed: Extended support of Microsoft.Logging.Extensions to include versions 7 and 8. (Thanks gizmohd and dantdj!) [3.0.0] - 2022-03-17 Changed: Updated dependencies for use with Microsoft.Extensions.Logging version 6.x. [2.0.0] - 2021-05-20 Starting with the 2.0.0 release, this package integrates with the 5.x major version of Microsoft.Extensions.Logging. Subsequent releases will target higher versions of Microsoft.Extensions.Logging as needed. [1.0.0] - 2021-05-20 Initial release. This version integrates with Microsoft.Extensions.Logging version 3.x. Subsequent major version releases will target higher versions of Microsoft.Extensions.Logging."
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to the LaunchDarkly Logging API for .NET Adapters | LaunchDarkly Logging API for .NET - Microsoft.Extensions.Logging Adapter",
    "keywords": "Contributing to the LaunchDarkly Logging API for .NET Adapters LaunchDarkly has published an SDK contributor's guide that provides a detailed explanation of how our SDKs work. See below for additional information on how to contribute to this SDK. Submitting bug reports and feature requests The LaunchDarkly SDK team monitors the issue tracker in this repository. Bug reports and feature requests specific to this package should be filed in this issue tracker. The SDK team will respond to all newly filed issues within two business days. Submitting pull requests We encourage pull requests and other contributions from the community. Before submitting pull requests, ensure that all temporary or unintended code is removed. Don't worry about adding reviewers to the pull request; the LaunchDarkly SDK team will add themselves. The SDK team will acknowledge all pull requests within two business days. Build instructions Prerequisites To set up your SDK build time environment, you must download .NET development tools and follow the instructions. .NET 5.0 is preferred, since the .NET 5.0 tools are able to build for all supported target platforms. Building To install all required packages: dotnet restore To build all targets of the project without running any tests: dotnet build Or, to build only the .NET Standard 2.0 target: dotnet build -f netstandard2.0 Testing To run all unit tests, for all targets: dotnet test Or, to run tests only for the .NET Standard 2.0 target (using the .NET Core 2.1 runtime): dotnet test -f netcoreapp2.1"
  },
  "README.html": {
    "href": "README.html",
    "title": "LaunchDarkly Logging API for .NET - Microsoft.Extensions.Logging Adapter | LaunchDarkly Logging API for .NET - Microsoft.Extensions.Logging Adapter",
    "keywords": "LaunchDarkly Logging API for .NET - Microsoft.Extensions.Logging Adapter Overview This .NET package provides integration from the LaunchDarkly.Logging API that is used by the LaunchDarkly .NET SDK, Xamarin SDK, and other LaunchDarkly libraries, to the Microsoft logging framework Microsoft.Extensions.Logging. For more information and examples, see the API documentation. Supported .NET versions The 3.x version of the package, which references Microsoft.Extensions.Logging version 6.x, is built for two target frameworks: .NET Standard 2.1: runs in .NET Core 3.1 and above, or in .NET 5.0 and above, or in library code that is targeted to .NET Standard 2.1 and above. .NET Standard 2.0: runs in .NET Framework 4.6.1 and above, or in library code that is targeted to .NET Standard 2.0. The .NET build tools should automatically load the most appropriate build of the library for whatever platform your application or library is targeted to. The 2.x version of LaunchDarkly.Logging.Microsoft is for use with Microsoft.Extensions.Logging version 5.x, and is functionally identical otherwise. New versions of LaunchDarkly.Logging.Microsoft will be released as necessary to support higher versions of Microsoft.Extensions.Logging as they become available. Contributing See Contributing. Signing The published version of this assembly is digitally signed with Authenticode and strong-named. Building the code locally in the default Debug configuration does not use strong-naming and does not require a key file. The public key file is in this repo at LaunchDarkly.Logging.pk as well as here: Public Key: 2400000080040000009400000206000024000000535231410400000000010001 afcbfe1e33dbb0c823ca71ef053aed35a49a7f1e601d9ee27fe86b78062b1d83 30814ed41ccaf3817ff3f699766e5debb3dd46fd75f7439fc2fe390fcee65465 a8a17f69f1bef56e253fc9166096c907514ab74b812d041faa04712e2bcb243d 1038eed2b0023a35a41782d70c65cb4b51d189576df0b7846e9378a5d0758a39 Public Key Token: d9182e4b0afd33e7 About LaunchDarkly LaunchDarkly is a continuous delivery platform that provides feature flags as a service and allows developers to iterate quickly and safely. We allow you to easily flag your features and manage them from the LaunchDarkly dashboard. With LaunchDarkly, you can: Roll out a new feature to a subset of your users (like a group of users who opt-in to a beta tester group), gathering feedback and bug reports from real-world use cases. Gradually roll out a feature to an increasing percentage of users, and track the effect that the feature has on key metrics (for instance, how likely is a user to complete a purchase if they have feature A versus feature B?). Turn off a feature that you realize is causing performance problems in production, without needing to re-deploy, or even restart the application with a changed configuration file. Grant access to certain features based on user attributes, like payment plan (eg: users on the ‘gold’ plan get access to more features than users in the ‘silver’ plan). Disable parts of your application to facilitate maintenance, without taking everything offline. LaunchDarkly provides feature flag SDKs for a wide variety of languages and technologies. Check out our documentation for a complete list. Explore LaunchDarkly launchdarkly.com for more information docs.launchdarkly.com for our documentation and SDK reference guides apidocs.launchdarkly.com for our API documentation blog.launchdarkly.com for the latest product updates"
  },
  "SECURITY.html": {
    "href": "SECURITY.html",
    "title": "Reporting and Fixing Security Issues | LaunchDarkly Logging API for .NET - Microsoft.Extensions.Logging Adapter",
    "keywords": "Reporting and Fixing Security Issues Please report all security issues to the LaunchDarkly security team by submitting a bug bounty report to our HackerOne program. LaunchDarkly will triage and address all valid security issues following the response targets defined in our program policy. Valid security issues may be eligible for a bounty. Please do not open issues or pull requests for security issues. This makes the problem immediately visible to everyone, including potentially malicious actors."
  },
  "api/LaunchDarkly.Logging.LdMicrosoftLogging.html": {
    "href": "api/LaunchDarkly.Logging.LdMicrosoftLogging.html",
    "title": "Class LdMicrosoftLogging | LaunchDarkly Logging API for .NET - Microsoft.Extensions.Logging Adapter",
    "keywords": "Class LdMicrosoftLogging Provides integration between the LaunchDarkly SDK's logging framework and the Microsoft.Extensions.Logging API. Inheritance object LdMicrosoftLogging Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.Microsoft.dll Syntax public static class LdMicrosoftLogging Methods | Edit this page View Source Adapter(ILoggerFactory) A logging implementation that delegates to the Microsoft.Extensions.Logging framework. Declaration public static ILogAdapter Adapter(ILoggerFactory loggerFactory) Parameters Type Name Description ILoggerFactory loggerFactory the factory object for Microsoft logging Returns Type Description ILogAdapter a logging adapter Remarks This method is only available when your target framework is .NET Core. It causes the LaunchDarkly.Logging APIs to delegate to the Microsoft.Extensions.Logging framework. The ILoggerFactory is the main configuration object for Microsoft.Extensions.Logging; application code can construct it programmatically, or can obtain it by dependency injection. For more information, see Logging in .NET Core and ASP.NET Core. The Microsoft.Extensions.Logging framework has its own mechanisms for filtering log output by level or other criteria. If you add a level filter with LaunchDarkly.Logging.ILogAdapterExtensions.Level(LaunchDarkly.Logging.ILogAdapter, LaunchDarkly.Logging.LogLevel), it will filter out messages below that level before they reach the Microsoft logger."
  },
  "api/LaunchDarkly.Logging.html": {
    "href": "api/LaunchDarkly.Logging.html",
    "title": "Namespace LaunchDarkly.Logging | LaunchDarkly Logging API for .NET - Microsoft.Extensions.Logging Adapter",
    "keywords": "Namespace LaunchDarkly.Logging Classes LdMicrosoftLogging Provides integration between the LaunchDarkly SDK's logging framework and the Microsoft.Extensions.Logging API."
  },
  "index.html": {
    "href": "index.html",
    "title": "| LaunchDarkly Logging API for .NET - Microsoft.Extensions.Logging Adapter",
    "keywords": "This .NET package provides integration from the LaunchDarkly.Logging API that is used by the LaunchDarkly .NET SDK, Xamarin SDK, and other LaunchDarkly libraries, to the Microsoft logging framework Microsoft.Extensions.Logging. This adapter is published as a separate NuGet package to avoid unwanted dependencies on Microsoft.Extensions.Logging in the LaunchDarkly SDKs and in applications that do not use that framework. The LaunchDarkly.Logging package also contains a version of this adapter, Logs.CoreLogging, which was implemented only in the .NET Core target framework and always uses version 5.x of Microsoft.Extensions.Logging. LaunchDarkly.Logging.Microsoft is the more broadly compatible version of that. Usage The LdMicrosoftLogging adapter is provided by the NuGet package LaunchDarkly.Logging.Microsoft. Version 2.x of the package works with Microsoft.Extensions.Logging version 5.x. New versions of LaunchDarkly.Logging.Microsoft will be released as necessary to support higher versions of Microsoft.Extensions.Logging as they become available. Like LaunchDarkly.Logging, Microsoft.Extensions.Logging is a facade that can delegate to various destinations. These are configured with the LoggerFactory or by dependency injection mechanisms that provide an ILoggerFactory. LaunchDarkly.Logging already has adapters of its own for some of the same basic destinations that Microsoft.Extensions.Logging can write to. For instance, to send log output from LaunchDarkly components to the console, or to a file, you do not need to use Microsoft.Extensions.Logging; you can simply use the methods in LaunchDarkly.Logging.Logs. This adapter is mainly useful if you require the more advanced configuration that Microsoft.Extensions.Logging provides, or if you have an application that is already using Microsoft.Extensions.Logging. To use the adapter: Add the NuGet package LaunchDarkly.Logging.Microsoft to your project. Make sure you also have a dependency on a compatible version of Microsoft.Extensions.Logging. Use the property LdMicrosoftLogging.Adapter in any LaunchDarkly library configuration that accepts a LaunchDarkly.Logging.ILogAdapter object. It requires an ILoggerFactory, which in .NET Core is often obtained by dependency injection. For instance, if you are configuring the LaunchDarkly .NET SDK in a component that uses dependency injection: using LaunchDarkly.Logging; using LaunchDarkly.Sdk.Server; using Microsoft.Extensions.Logging; public class MyApplicationComponent { private LdClient ldClient; public MyApplicationComponent(ILoggerFactory loggerFactory) { var config = Configuration.Builder(\"my-sdk-key\") .Logging(LdMicrosoftLogging.Adapter(loggerFactory)) .Build(); ldClient = new LdClient(config); } }"
  }
}